def count_permutations_with_beautiful_points(n, k):
    def count_beautiful_points(permutation):
        count = 0
        for i in range(n):
            if permutation[i] == i + 1:
                count += 1
        return count

    def generate_permutations(permutation, i):
        if i == n:
            if count_beautiful_points(permutation) == k:
                return 1
            else:
                return 0
        else:
            total_count = 0
            for j in range(1, n + 1):
                if not used[j]:
                    used[j] = True
                    permutation[i] = j
                    total_count += generate_permutations(permutation, i + 1)
                    used[j] = False
            return total_count

    permutation = [0] * n
    used = [False] * (n + 1)
    return generate_permutations(permutation, 0)

# Sample Inputs
inputs = [
    (5, 2),
    (9, 6),
    (2, 1),
    (9, 0)
]

# Sample Outputs
outputs = [
    20,
    168,
    0,
    133496
]

# Testing the function with sample inputs
for i in range(len(inputs)):
    n, k = inputs[i]
    expected_output = outputs[i]
    result = count_permutations_with_beautiful_points(n, k)
    print(f"Sample {i+1}: Expected Output: {expected_output}, Computed Output: {result}")
